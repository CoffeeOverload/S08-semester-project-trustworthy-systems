/*
 * generated by Xtext 2.30.0
 */
package dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dsl.ide.contentassist.antlr.internal.InternalTemperatureSensorParser;
import dsl.services.TemperatureSensorGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TemperatureSensorParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TemperatureSensorGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TemperatureSensorGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBatchSizeAccess().getAlternatives_0(), "rule__BatchSize__Alternatives_0");
			builder.put(grammarAccess.getMaxSensorAccess().getAlternatives_0(), "rule__MaxSensor__Alternatives_0");
			builder.put(grammarAccess.getMaxSensorAccess().getAlternatives_0_0(), "rule__MaxSensor__Alternatives_0_0");
			builder.put(grammarAccess.getMaxSensorAccess().getAlternatives_0_1_1(), "rule__MaxSensor__Alternatives_0_1_1");
			builder.put(grammarAccess.getSampleRateAccess().getAlternatives_0(), "rule__SampleRate__Alternatives_0");
			builder.put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
			builder.put(grammarAccess.getBatchSizeAccess().getGroup(), "rule__BatchSize__Group__0");
			builder.put(grammarAccess.getBatchSizeAccess().getGroup_0_1(), "rule__BatchSize__Group_0_1__0");
			builder.put(grammarAccess.getMaxSensorAccess().getGroup(), "rule__MaxSensor__Group__0");
			builder.put(grammarAccess.getMaxSensorAccess().getGroup_0_1(), "rule__MaxSensor__Group_0_1__0");
			builder.put(grammarAccess.getSampleRateAccess().getGroup(), "rule__SampleRate__Group__0");
			builder.put(grammarAccess.getSampleRateAccess().getGroup_0_1(), "rule__SampleRate__Group_0_1__0");
			builder.put(grammarAccess.getDeviceAccess().getNameAssignment_1(), "rule__Device__NameAssignment_1");
			builder.put(grammarAccess.getDeviceAccess().getBatchSizeAssignment_2_0(), "rule__Device__BatchSizeAssignment_2_0");
			builder.put(grammarAccess.getDeviceAccess().getMaxSensorAssignment_2_1(), "rule__Device__MaxSensorAssignment_2_1");
			builder.put(grammarAccess.getDeviceAccess().getSampleRateAssignment_2_2(), "rule__Device__SampleRateAssignment_2_2");
			builder.put(grammarAccess.getBatchSizeAccess().getValueAssignment_1(), "rule__BatchSize__ValueAssignment_1");
			builder.put(grammarAccess.getMaxSensorAccess().getValueAssignment_1(), "rule__MaxSensor__ValueAssignment_1");
			builder.put(grammarAccess.getSampleRateAccess().getValueAssignment_1(), "rule__SampleRate__ValueAssignment_1");
			builder.put(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), "rule__Device__UnorderedGroup_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TemperatureSensorGrammarAccess grammarAccess;

	@Override
	protected InternalTemperatureSensorParser createParser() {
		InternalTemperatureSensorParser result = new InternalTemperatureSensorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TemperatureSensorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TemperatureSensorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
