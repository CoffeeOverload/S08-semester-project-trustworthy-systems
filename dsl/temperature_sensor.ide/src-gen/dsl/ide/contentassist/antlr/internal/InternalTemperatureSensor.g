/*
 * generated by Xtext 2.30.0
 */
grammar InternalTemperatureSensor;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dsl.services.TemperatureSensorGrammarAccess;

}
@parser::members {
	private TemperatureSensorGrammarAccess grammarAccess;

	public void setGrammarAccess(TemperatureSensorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDevice
entryRuleDevice
:
{ before(grammarAccess.getDeviceRule()); }
	 ruleDevice
{ after(grammarAccess.getDeviceRule()); } 
	 EOF 
;

// Rule Device
ruleDevice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviceAccess().getGroup()); }
		(rule__Device__Group__0)
		{ after(grammarAccess.getDeviceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBatchSize
entryRuleBatchSize
:
{ before(grammarAccess.getBatchSizeRule()); }
	 ruleBatchSize
{ after(grammarAccess.getBatchSizeRule()); } 
	 EOF 
;

// Rule BatchSize
ruleBatchSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBatchSizeAccess().getGroup()); }
		(rule__BatchSize__Group__0)
		{ after(grammarAccess.getBatchSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaxSensor
entryRuleMaxSensor
:
{ before(grammarAccess.getMaxSensorRule()); }
	 ruleMaxSensor
{ after(grammarAccess.getMaxSensorRule()); } 
	 EOF 
;

// Rule MaxSensor
ruleMaxSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaxSensorAccess().getGroup()); }
		(rule__MaxSensor__Group__0)
		{ after(grammarAccess.getMaxSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSampleRate
entryRuleSampleRate
:
{ before(grammarAccess.getSampleRateRule()); }
	 ruleSampleRate
{ after(grammarAccess.getSampleRateRule()); } 
	 EOF 
;

// Rule SampleRate
ruleSampleRate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSampleRateAccess().getGroup()); }
		(rule__SampleRate__Group__0)
		{ after(grammarAccess.getSampleRateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBatchSizeAccess().getBatchsizeKeyword_0_0()); }
		'batchsize'
		{ after(grammarAccess.getBatchSizeAccess().getBatchsizeKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBatchSizeAccess().getGroup_0_1()); }
		(rule__BatchSize__Group_0_1__0)
		{ after(grammarAccess.getBatchSizeAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxSensorAccess().getAlternatives_0_0()); }
		(rule__MaxSensor__Alternatives_0_0)
		{ after(grammarAccess.getMaxSensorAccess().getAlternatives_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMaxSensorAccess().getGroup_0_1()); }
		(rule__MaxSensor__Group_0_1__0)
		{ after(grammarAccess.getMaxSensorAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxSensorAccess().getMaxsensorKeyword_0_0_0()); }
		'maxsensor'
		{ after(grammarAccess.getMaxSensorAccess().getMaxsensorKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMaxSensorAccess().getMaxsensorsKeyword_0_0_1()); }
		'maxsensors'
		{ after(grammarAccess.getMaxSensorAccess().getMaxsensorsKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Alternatives_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxSensorAccess().getSensorKeyword_0_1_1_0()); }
		'sensor'
		{ after(grammarAccess.getMaxSensorAccess().getSensorKeyword_0_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMaxSensorAccess().getSensorsKeyword_0_1_1_1()); }
		'sensors'
		{ after(grammarAccess.getMaxSensorAccess().getSensorsKeyword_0_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSampleRateAccess().getSamplerateKeyword_0_0()); }
		'samplerate'
		{ after(grammarAccess.getSampleRateAccess().getSamplerateKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSampleRateAccess().getGroup_0_1()); }
		(rule__SampleRate__Group_0_1__0)
		{ after(grammarAccess.getSampleRateAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__0__Impl
	rule__Device__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getDeviceKeyword_0()); }
	'device'
	{ after(grammarAccess.getDeviceAccess().getDeviceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__1__Impl
	rule__Device__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getNameAssignment_1()); }
	(rule__Device__NameAssignment_1)
	{ after(grammarAccess.getDeviceAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getUnorderedGroup_2()); }
	(rule__Device__UnorderedGroup_2)
	{ after(grammarAccess.getDeviceAccess().getUnorderedGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BatchSize__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BatchSize__Group__0__Impl
	rule__BatchSize__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBatchSizeAccess().getAlternatives_0()); }
	(rule__BatchSize__Alternatives_0)
	{ after(grammarAccess.getBatchSizeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BatchSize__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBatchSizeAccess().getValueAssignment_1()); }
	(rule__BatchSize__ValueAssignment_1)
	{ after(grammarAccess.getBatchSizeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BatchSize__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BatchSize__Group_0_1__0__Impl
	rule__BatchSize__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBatchSizeAccess().getBatchKeyword_0_1_0()); }
	'batch'
	{ after(grammarAccess.getBatchSizeAccess().getBatchKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BatchSize__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBatchSizeAccess().getSizeKeyword_0_1_1()); }
	'size'
	{ after(grammarAccess.getBatchSizeAccess().getSizeKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaxSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxSensor__Group__0__Impl
	rule__MaxSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxSensorAccess().getAlternatives_0()); }
	(rule__MaxSensor__Alternatives_0)
	{ after(grammarAccess.getMaxSensorAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxSensorAccess().getValueAssignment_1()); }
	(rule__MaxSensor__ValueAssignment_1)
	{ after(grammarAccess.getMaxSensorAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaxSensor__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxSensor__Group_0_1__0__Impl
	rule__MaxSensor__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxSensorAccess().getMaxKeyword_0_1_0()); }
	'max'
	{ after(grammarAccess.getMaxSensorAccess().getMaxKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxSensor__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxSensorAccess().getAlternatives_0_1_1()); }
	(rule__MaxSensor__Alternatives_0_1_1)
	{ after(grammarAccess.getMaxSensorAccess().getAlternatives_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SampleRate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SampleRate__Group__0__Impl
	rule__SampleRate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSampleRateAccess().getAlternatives_0()); }
	(rule__SampleRate__Alternatives_0)
	{ after(grammarAccess.getSampleRateAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SampleRate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSampleRateAccess().getValueAssignment_1()); }
	(rule__SampleRate__ValueAssignment_1)
	{ after(grammarAccess.getSampleRateAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SampleRate__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SampleRate__Group_0_1__0__Impl
	rule__SampleRate__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSampleRateAccess().getSampleKeyword_0_1_0()); }
	'sample'
	{ after(grammarAccess.getSampleRateAccess().getSampleKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SampleRate__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSampleRateAccess().getRateKeyword_0_1_1()); }
	'rate'
	{ after(grammarAccess.getSampleRateAccess().getRateKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Device__UnorderedGroup_2
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
	}
:
	rule__Device__UnorderedGroup_2__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getDeviceAccess().getUnorderedGroup_2())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}

rule__Device__UnorderedGroup_2__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getDeviceAccess().getBatchSizeAssignment_2_0()); }
					(rule__Device__BatchSizeAssignment_2_0)
					{ after(grammarAccess.getDeviceAccess().getBatchSizeAssignment_2_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getDeviceAccess().getMaxSensorAssignment_2_1()); }
					(rule__Device__MaxSensorAssignment_2_1)
					{ after(grammarAccess.getDeviceAccess().getMaxSensorAssignment_2_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getDeviceAccess().getSampleRateAssignment_2_2()); }
					(rule__Device__SampleRateAssignment_2_2)
					{ after(grammarAccess.getDeviceAccess().getSampleRateAssignment_2_2()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}

rule__Device__UnorderedGroup_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__UnorderedGroup_2__Impl
	rule__Device__UnorderedGroup_2__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__UnorderedGroup_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__UnorderedGroup_2__Impl
	rule__Device__UnorderedGroup_2__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__UnorderedGroup_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__UnorderedGroup_2__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Device__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__BatchSizeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getBatchSizeBatchSizeParserRuleCall_2_0_0()); }
		ruleBatchSize
		{ after(grammarAccess.getDeviceAccess().getBatchSizeBatchSizeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__MaxSensorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getMaxSensorMaxSensorParserRuleCall_2_1_0()); }
		ruleMaxSensor
		{ after(grammarAccess.getDeviceAccess().getMaxSensorMaxSensorParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__SampleRateAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getSampleRateSampleRateParserRuleCall_2_2_0()); }
		ruleSampleRate
		{ after(grammarAccess.getDeviceAccess().getSampleRateSampleRateParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchSize__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBatchSizeAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getBatchSizeAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxSensor__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxSensorAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMaxSensorAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SampleRate__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSampleRateAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSampleRateAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
