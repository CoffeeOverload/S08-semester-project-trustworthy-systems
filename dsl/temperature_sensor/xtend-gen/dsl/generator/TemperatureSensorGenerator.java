/**
 * generated by Xtext 2.30.0
 */
package dsl.generator;

import com.google.common.collect.Iterators;
import dsl.temperatureSensor.Device;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TemperatureSensorGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Device device = Iterators.<Device>filter(resource.getAllContents(), Device.class).next();
    fsa.generateFile("device.h", this.compileHeader(device));
    fsa.generateFile("device.c", this.compile(device));
  }

  public CharSequence compileHeader(final Device d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef DEVICESTRUCT_H");
    _builder.newLine();
    _builder.append("#define DEVICESTRUCT_H");
    _builder.newLine();
    _builder.newLine();
    _builder.append("struct Device {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("char id[10];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int batchSize;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int maxSensors;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int sampleRate;");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compile(final Device d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include <stdio.h>");
    _builder.newLine();
    _builder.append("#include \"device.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("struct Device device_");
    String _name = d.getName();
    _builder.append(_name);
    _builder.append(" = { \"");
    String _name_1 = d.getName();
    _builder.append(_name_1);
    _builder.append("\", ");
    int _value = d.getBatchSize().getValue();
    _builder.append(_value);
    _builder.append(", ");
    int _value_1 = d.getMaxSensor().getValue();
    _builder.append(_value_1);
    _builder.append(", ");
    int _value_2 = d.getSampleRate().getValue();
    _builder.append(_value_2);
    _builder.append(" };");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("int main() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("printf(\"Device ID: %s\\n\", device_");
    String _name_2 = d.getName();
    _builder.append(_name_2, "    ");
    _builder.append(".id);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("printf(\"Batch size: %d\\n\", device_");
    String _name_3 = d.getName();
    _builder.append(_name_3, "    ");
    _builder.append(".batchSize);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("printf(\"Max sensors: %d\\n\", device_");
    String _name_4 = d.getName();
    _builder.append(_name_4, "    ");
    _builder.append(".maxSensors);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("printf(\"Sample rate: %d\\n\", device_");
    String _name_5 = d.getName();
    _builder.append(_name_5, "    ");
    _builder.append(".sampleRate);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
