/*
 * generated by Xtext 2.30.0
 */
package dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dsl.temperatureSensor.Device

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TemperatureSensorGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
val device = resource.allContents.filter(Device).next
        fsa.generateFile("device.h", device.compileHeader)
        fsa.generateFile("device.c", device.compile)
    }
    
    def compileHeader(Device d) {
        '''
        #ifndef DEVICESTRUCT_H
        #define DEVICESTRUCT_H
        
        struct Device {
            char id[10];
            int batchSize;
            int maxSensors;
            int sampleRate;
        };
        
        #endif
        '''
    }
    
    def compile(Device d) {
        '''
        #include <stdio.h>
        #include "device.h"
        
        struct Device device_«d.name» = { "«d.name»", «d.batchSize.value», «d.maxSensor.value», «d.sampleRate.value» };
        
        int main() {
            printf("Device ID: %s\n", device_«d.name».id);
            printf("Batch size: %d\n", device_«d.name».batchSize);
            printf("Max sensors: %d\n", device_«d.name».maxSensors);
            printf("Sample rate: %d\n", device_«d.name».sampleRate);
            return 0;
        }
        '''
    }
}