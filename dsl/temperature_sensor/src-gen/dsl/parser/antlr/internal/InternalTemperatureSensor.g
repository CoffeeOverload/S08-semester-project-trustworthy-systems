/*
 * generated by Xtext 2.30.0
 */
grammar InternalTemperatureSensor;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dsl.services.TemperatureSensorGrammarAccess;

}

@parser::members {

 	private TemperatureSensorGrammarAccess grammarAccess;

    public InternalTemperatureSensorParser(TokenStream input, TemperatureSensorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Device";
   	}

   	@Override
   	protected TemperatureSensorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	iv_ruleDevice=ruleDevice
	{ $current=$iv_ruleDevice.current; }
	EOF;

// Rule Device
ruleDevice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='device'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeviceAccess().getDeviceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeviceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDeviceAccess().getBatchSizeBatchSizeParserRuleCall_2_0_0());
									}
									lv_batchSize_3_0=ruleBatchSize
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDeviceRule());
										}
										set(
											$current,
											"batchSize",
											lv_batchSize_3_0,
											"dsl.TemperatureSensor.BatchSize");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDeviceAccess().getMaxSensorMaxSensorParserRuleCall_2_1_0());
									}
									lv_maxSensor_4_0=ruleMaxSensor
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDeviceRule());
										}
										set(
											$current,
											"maxSensor",
											lv_maxSensor_4_0,
											"dsl.TemperatureSensor.MaxSensor");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDeviceAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDeviceAccess().getSampleRateSampleRateParserRuleCall_2_2_0());
									}
									lv_sampleRate_5_0=ruleSampleRate
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDeviceRule());
										}
										set(
											$current,
											"sampleRate",
											lv_sampleRate_5_0,
											"dsl.TemperatureSensor.SampleRate");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
					}
				)
			)
					)+
					{getUnorderedGroupHelper().canLeave(grammarAccess.getDeviceAccess().getUnorderedGroup_2())}?
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getDeviceAccess().getUnorderedGroup_2());
				}
		)
	)
;

// Entry rule entryRuleBatchSize
entryRuleBatchSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatchSizeRule()); }
	iv_ruleBatchSize=ruleBatchSize
	{ $current=$iv_ruleBatchSize.current; }
	EOF;

// Rule BatchSize
ruleBatchSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='batchsize'
			{
				newLeafNode(otherlv_0, grammarAccess.getBatchSizeAccess().getBatchsizeKeyword_0_0());
			}
			    |
			(
				otherlv_1='batch'
				{
					newLeafNode(otherlv_1, grammarAccess.getBatchSizeAccess().getBatchKeyword_0_1_0());
				}
				otherlv_2='size'
				{
					newLeafNode(otherlv_2, grammarAccess.getBatchSizeAccess().getSizeKeyword_0_1_1());
				}
			)
		)
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getBatchSizeAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBatchSizeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMaxSensor
entryRuleMaxSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxSensorRule()); }
	iv_ruleMaxSensor=ruleMaxSensor
	{ $current=$iv_ruleMaxSensor.current; }
	EOF;

// Rule MaxSensor
ruleMaxSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='maxsensor'
				{
					newLeafNode(otherlv_0, grammarAccess.getMaxSensorAccess().getMaxsensorKeyword_0_0_0());
				}
				    |
				otherlv_1='maxsensors'
				{
					newLeafNode(otherlv_1, grammarAccess.getMaxSensorAccess().getMaxsensorsKeyword_0_0_1());
				}
			)
			    |
			(
				otherlv_2='max'
				{
					newLeafNode(otherlv_2, grammarAccess.getMaxSensorAccess().getMaxKeyword_0_1_0());
				}
				(
					otherlv_3='sensor'
					{
						newLeafNode(otherlv_3, grammarAccess.getMaxSensorAccess().getSensorKeyword_0_1_1_0());
					}
					    |
					otherlv_4='sensors'
					{
						newLeafNode(otherlv_4, grammarAccess.getMaxSensorAccess().getSensorsKeyword_0_1_1_1());
					}
				)
			)
		)
		(
			(
				lv_value_5_0=RULE_INT
				{
					newLeafNode(lv_value_5_0, grammarAccess.getMaxSensorAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxSensorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSampleRate
entryRuleSampleRate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSampleRateRule()); }
	iv_ruleSampleRate=ruleSampleRate
	{ $current=$iv_ruleSampleRate.current; }
	EOF;

// Rule SampleRate
ruleSampleRate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='samplerate'
			{
				newLeafNode(otherlv_0, grammarAccess.getSampleRateAccess().getSamplerateKeyword_0_0());
			}
			    |
			(
				otherlv_1='sample'
				{
					newLeafNode(otherlv_1, grammarAccess.getSampleRateAccess().getSampleKeyword_0_1_0());
				}
				otherlv_2='rate'
				{
					newLeafNode(otherlv_2, grammarAccess.getSampleRateAccess().getRateKeyword_0_1_1());
				}
			)
		)
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getSampleRateAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSampleRateRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
