/**
 * generated by Xtext 2.30.0
 */
package dsl.temperatureSensor.impl;

import dsl.temperatureSensor.Device;
import dsl.temperatureSensor.Parameter;
import dsl.temperatureSensor.TemperatureSensorPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Device</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dsl.temperatureSensor.impl.DeviceImpl#getName <em>Name</em>}</li>
 *   <li>{@link dsl.temperatureSensor.impl.DeviceImpl#getBatchSize <em>Batch Size</em>}</li>
 *   <li>{@link dsl.temperatureSensor.impl.DeviceImpl#getMaxSensor <em>Max Sensor</em>}</li>
 *   <li>{@link dsl.temperatureSensor.impl.DeviceImpl#getSampleRate <em>Sample Rate</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeviceImpl extends MinimalEObjectImpl.Container implements Device
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBatchSize() <em>Batch Size</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatchSize()
   * @generated
   * @ordered
   */
  protected Parameter batchSize;

  /**
   * The cached value of the '{@link #getMaxSensor() <em>Max Sensor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxSensor()
   * @generated
   * @ordered
   */
  protected Parameter maxSensor;

  /**
   * The cached value of the '{@link #getSampleRate() <em>Sample Rate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSampleRate()
   * @generated
   * @ordered
   */
  protected Parameter sampleRate;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TemperatureSensorPackage.Literals.DEVICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter getBatchSize()
  {
    return batchSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBatchSize(Parameter newBatchSize, NotificationChain msgs)
  {
    Parameter oldBatchSize = batchSize;
    batchSize = newBatchSize;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__BATCH_SIZE, oldBatchSize, newBatchSize);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatchSize(Parameter newBatchSize)
  {
    if (newBatchSize != batchSize)
    {
      NotificationChain msgs = null;
      if (batchSize != null)
        msgs = ((InternalEObject)batchSize).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TemperatureSensorPackage.DEVICE__BATCH_SIZE, null, msgs);
      if (newBatchSize != null)
        msgs = ((InternalEObject)newBatchSize).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TemperatureSensorPackage.DEVICE__BATCH_SIZE, null, msgs);
      msgs = basicSetBatchSize(newBatchSize, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__BATCH_SIZE, newBatchSize, newBatchSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter getMaxSensor()
  {
    return maxSensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaxSensor(Parameter newMaxSensor, NotificationChain msgs)
  {
    Parameter oldMaxSensor = maxSensor;
    maxSensor = newMaxSensor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__MAX_SENSOR, oldMaxSensor, newMaxSensor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxSensor(Parameter newMaxSensor)
  {
    if (newMaxSensor != maxSensor)
    {
      NotificationChain msgs = null;
      if (maxSensor != null)
        msgs = ((InternalEObject)maxSensor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TemperatureSensorPackage.DEVICE__MAX_SENSOR, null, msgs);
      if (newMaxSensor != null)
        msgs = ((InternalEObject)newMaxSensor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TemperatureSensorPackage.DEVICE__MAX_SENSOR, null, msgs);
      msgs = basicSetMaxSensor(newMaxSensor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__MAX_SENSOR, newMaxSensor, newMaxSensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter getSampleRate()
  {
    return sampleRate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSampleRate(Parameter newSampleRate, NotificationChain msgs)
  {
    Parameter oldSampleRate = sampleRate;
    sampleRate = newSampleRate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__SAMPLE_RATE, oldSampleRate, newSampleRate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSampleRate(Parameter newSampleRate)
  {
    if (newSampleRate != sampleRate)
    {
      NotificationChain msgs = null;
      if (sampleRate != null)
        msgs = ((InternalEObject)sampleRate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TemperatureSensorPackage.DEVICE__SAMPLE_RATE, null, msgs);
      if (newSampleRate != null)
        msgs = ((InternalEObject)newSampleRate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TemperatureSensorPackage.DEVICE__SAMPLE_RATE, null, msgs);
      msgs = basicSetSampleRate(newSampleRate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TemperatureSensorPackage.DEVICE__SAMPLE_RATE, newSampleRate, newSampleRate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TemperatureSensorPackage.DEVICE__BATCH_SIZE:
        return basicSetBatchSize(null, msgs);
      case TemperatureSensorPackage.DEVICE__MAX_SENSOR:
        return basicSetMaxSensor(null, msgs);
      case TemperatureSensorPackage.DEVICE__SAMPLE_RATE:
        return basicSetSampleRate(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TemperatureSensorPackage.DEVICE__NAME:
        return getName();
      case TemperatureSensorPackage.DEVICE__BATCH_SIZE:
        return getBatchSize();
      case TemperatureSensorPackage.DEVICE__MAX_SENSOR:
        return getMaxSensor();
      case TemperatureSensorPackage.DEVICE__SAMPLE_RATE:
        return getSampleRate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TemperatureSensorPackage.DEVICE__NAME:
        setName((String)newValue);
        return;
      case TemperatureSensorPackage.DEVICE__BATCH_SIZE:
        setBatchSize((Parameter)newValue);
        return;
      case TemperatureSensorPackage.DEVICE__MAX_SENSOR:
        setMaxSensor((Parameter)newValue);
        return;
      case TemperatureSensorPackage.DEVICE__SAMPLE_RATE:
        setSampleRate((Parameter)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TemperatureSensorPackage.DEVICE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TemperatureSensorPackage.DEVICE__BATCH_SIZE:
        setBatchSize((Parameter)null);
        return;
      case TemperatureSensorPackage.DEVICE__MAX_SENSOR:
        setMaxSensor((Parameter)null);
        return;
      case TemperatureSensorPackage.DEVICE__SAMPLE_RATE:
        setSampleRate((Parameter)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TemperatureSensorPackage.DEVICE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TemperatureSensorPackage.DEVICE__BATCH_SIZE:
        return batchSize != null;
      case TemperatureSensorPackage.DEVICE__MAX_SENSOR:
        return maxSensor != null;
      case TemperatureSensorPackage.DEVICE__SAMPLE_RATE:
        return sampleRate != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DeviceImpl
