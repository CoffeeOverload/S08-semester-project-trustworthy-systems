/*
 * generated by Xtext 2.30.0
 */
package dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TemperatureSensorGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.TemperatureSensor.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cBatchSizeAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cBatchSizeBatchSizeParserRuleCall_2_0_0 = (RuleCall)cBatchSizeAssignment_2_0.eContents().get(0);
		private final Assignment cMaxSensorAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cMaxSensorMaxSensorParserRuleCall_2_1_0 = (RuleCall)cMaxSensorAssignment_2_1.eContents().get(0);
		private final Assignment cSampleRateAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cSampleRateSampleRateParserRuleCall_2_2_0 = (RuleCall)cSampleRateAssignment_2_2.eContents().get(0);
		
		//Device:
		//    'device' name=ID (batchSize = BatchSize & maxSensor = MaxSensor & sampleRate = SampleRate)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'device' name=ID (batchSize = BatchSize & maxSensor = MaxSensor & sampleRate = SampleRate)
		public Group getGroup() { return cGroup; }
		
		//'device'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(batchSize = BatchSize & maxSensor = MaxSensor & sampleRate = SampleRate)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//batchSize = BatchSize
		public Assignment getBatchSizeAssignment_2_0() { return cBatchSizeAssignment_2_0; }
		
		//BatchSize
		public RuleCall getBatchSizeBatchSizeParserRuleCall_2_0_0() { return cBatchSizeBatchSizeParserRuleCall_2_0_0; }
		
		//maxSensor = MaxSensor
		public Assignment getMaxSensorAssignment_2_1() { return cMaxSensorAssignment_2_1; }
		
		//MaxSensor
		public RuleCall getMaxSensorMaxSensorParserRuleCall_2_1_0() { return cMaxSensorMaxSensorParserRuleCall_2_1_0; }
		
		//sampleRate = SampleRate
		public Assignment getSampleRateAssignment_2_2() { return cSampleRateAssignment_2_2; }
		
		//SampleRate
		public RuleCall getSampleRateSampleRateParserRuleCall_2_2_0() { return cSampleRateSampleRateParserRuleCall_2_2_0; }
	}
	public class BatchSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.TemperatureSensor.BatchSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBatchsizeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cBatchKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cSizeKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BatchSize returns Parameter:
		//   ('batchsize' | 'batch' 'size') value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('batchsize' | 'batch' 'size') value=INT
		public Group getGroup() { return cGroup; }
		
		//('batchsize' | 'batch' 'size')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'batchsize'
		public Keyword getBatchsizeKeyword_0_0() { return cBatchsizeKeyword_0_0; }
		
		//'batch' 'size'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'batch'
		public Keyword getBatchKeyword_0_1_0() { return cBatchKeyword_0_1_0; }
		
		//'size'
		public Keyword getSizeKeyword_0_1_1() { return cSizeKeyword_0_1_1; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class MaxSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.TemperatureSensor.MaxSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cAlternatives_0.eContents().get(0);
		private final Keyword cMaxsensorKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cMaxsensorsKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cMaxKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Keyword cSensorKeyword_0_1_1_0 = (Keyword)cAlternatives_0_1_1.eContents().get(0);
		private final Keyword cSensorsKeyword_0_1_1_1 = (Keyword)cAlternatives_0_1_1.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MaxSensor returns Parameter:
		//    (('maxsensor' | 'maxsensors') | 'max' ('sensor' | 'sensors')) value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(('maxsensor' | 'maxsensors') | 'max' ('sensor' | 'sensors')) value=INT
		public Group getGroup() { return cGroup; }
		
		//(('maxsensor' | 'maxsensors') | 'max' ('sensor' | 'sensors'))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//('maxsensor' | 'maxsensors')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'maxsensor'
		public Keyword getMaxsensorKeyword_0_0_0() { return cMaxsensorKeyword_0_0_0; }
		
		//'maxsensors'
		public Keyword getMaxsensorsKeyword_0_0_1() { return cMaxsensorsKeyword_0_0_1; }
		
		//'max' ('sensor' | 'sensors')
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'max'
		public Keyword getMaxKeyword_0_1_0() { return cMaxKeyword_0_1_0; }
		
		//('sensor' | 'sensors')
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//'sensor'
		public Keyword getSensorKeyword_0_1_1_0() { return cSensorKeyword_0_1_1_0; }
		
		//'sensors'
		public Keyword getSensorsKeyword_0_1_1_1() { return cSensorsKeyword_0_1_1_1; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class SampleRateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.TemperatureSensor.SampleRate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSamplerateKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cSampleKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cRateKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SampleRate returns Parameter:
		//    ('samplerate' | 'sample' 'rate') value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('samplerate' | 'sample' 'rate') value=INT
		public Group getGroup() { return cGroup; }
		
		//('samplerate' | 'sample' 'rate')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'samplerate'
		public Keyword getSamplerateKeyword_0_0() { return cSamplerateKeyword_0_0; }
		
		//'sample' 'rate'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'sample'
		public Keyword getSampleKeyword_0_1_0() { return cSampleKeyword_0_1_0; }
		
		//'rate'
		public Keyword getRateKeyword_0_1_1() { return cRateKeyword_0_1_1; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private final DeviceElements pDevice;
	private final BatchSizeElements pBatchSize;
	private final MaxSensorElements pMaxSensor;
	private final SampleRateElements pSampleRate;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TemperatureSensorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDevice = new DeviceElements();
		this.pBatchSize = new BatchSizeElements();
		this.pMaxSensor = new MaxSensorElements();
		this.pSampleRate = new SampleRateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dsl.TemperatureSensor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Device:
	//    'device' name=ID (batchSize = BatchSize & maxSensor = MaxSensor & sampleRate = SampleRate)
	//;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//BatchSize returns Parameter:
	//   ('batchsize' | 'batch' 'size') value=INT
	//;
	public BatchSizeElements getBatchSizeAccess() {
		return pBatchSize;
	}
	
	public ParserRule getBatchSizeRule() {
		return getBatchSizeAccess().getRule();
	}
	
	//MaxSensor returns Parameter:
	//    (('maxsensor' | 'maxsensors') | 'max' ('sensor' | 'sensors')) value=INT
	//;
	public MaxSensorElements getMaxSensorAccess() {
		return pMaxSensor;
	}
	
	public ParserRule getMaxSensorRule() {
		return getMaxSensorAccess().getRule();
	}
	
	//SampleRate returns Parameter:
	//    ('samplerate' | 'sample' 'rate') value=INT
	//;
	public SampleRateElements getSampleRateAccess() {
		return pSampleRate;
	}
	
	public ParserRule getSampleRateRule() {
		return getSampleRateAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
