/*
 * generated by Xtext 2.30.0
 */
package dsl.serializer;

import com.google.inject.Inject;
import dsl.services.TemperatureSensorGrammarAccess;
import dsl.temperatureSensor.Device;
import dsl.temperatureSensor.TemperatureSensorPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TemperatureSensorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TemperatureSensorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TemperatureSensorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TemperatureSensorPackage.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case TemperatureSensorPackage.PARAMETER:
				if (rule == grammarAccess.getBatchSizeRule()) {
					sequence_BatchSize(context, (dsl.temperatureSensor.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMaxSensorRule()) {
					sequence_MaxSensor(context, (dsl.temperatureSensor.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSampleRateRule()) {
					sequence_SampleRate(context, (dsl.temperatureSensor.Parameter) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BatchSize returns Parameter
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_BatchSize(ISerializationContext context, dsl.temperatureSensor.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TemperatureSensorPackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TemperatureSensorPackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBatchSizeAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     (name=ID (batchSize=BatchSize | maxSensor=MaxSensor | sampleRate=SampleRate)+)
	 * </pre>
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MaxSensor returns Parameter
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_MaxSensor(ISerializationContext context, dsl.temperatureSensor.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TemperatureSensorPackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TemperatureSensorPackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxSensorAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SampleRate returns Parameter
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_SampleRate(ISerializationContext context, dsl.temperatureSensor.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TemperatureSensorPackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TemperatureSensorPackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSampleRateAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
